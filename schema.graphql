type UniswapV3Factory_PoolCreated {
  id: ID!
  token0: String!
  token1: String!
  fee: BigInt!
  tickSpacing: BigInt!
  pool: String!
}

type UniswapV3Pool_Burn {
  id: ID!
  owner: String!
  tickLower: BigInt!
  tickUpper: BigInt!
  amount: BigInt!
  amount0: BigInt!
  amount1: BigInt!
}

type UniswapV3Pool_Initialize {
  id: ID!
  sqrtPriceX96: BigInt!
  tick: BigInt!
}

type UniswapV3Pool_Mint {
  id: ID!
  sender: String!
  owner: String!
  tickLower: BigInt!
  tickUpper: BigInt!
  amount: BigInt!
  amount0: BigInt!
  amount1: BigInt!
}

# type UniswapV3Pool_Swap {
#   id: ID!
#   sender: String!
#   recipient: String!
#   amount0: BigInt!
#   amount1: BigInt!
#   sqrtPriceX96: BigInt!
#   liquidity: BigInt!
#   tick: BigInt!
#   eventsSummary: String!
# }

type Tick @entity {
  # format: <pool address>#<tick index>
  id: ID!
  poolAddress: String! # tick index
  tickIdx: BigInt!
  # how much liquidity changes when tick crossed
  liquidityNet: BigInt!
}
