type EventsSummary {
  id: ID!
  uniswapV3Factory_PoolCreated: [UniswapV3Factory_PoolCreated!]!
    @derivedFrom(field: "eventsSummary")
  uniswapV3Factory_PoolCreatedCount: BigInt!
  uniswapV3Pool_Burn: [UniswapV3Pool_Burn!]!
    @derivedFrom(field: "eventsSummary")
  uniswapV3Pool_BurnCount: BigInt!
  uniswapV3Pool_Initialize: [UniswapV3Pool_Initialize!]!
    @derivedFrom(field: "eventsSummary")
  uniswapV3Pool_InitializeCount: BigInt!
  uniswapV3Pool_Mint: [UniswapV3Pool_Mint!]!
    @derivedFrom(field: "eventsSummary")
  uniswapV3Pool_MintCount: BigInt!
}

type UniswapV3Factory_PoolCreated {
  id: ID!
  token0: String!
  token1: String!
  fee: BigInt!
  tickSpacing: BigInt!
  pool: String!
  eventsSummary: String!
}

type UniswapV3Pool_Burn {
  id: ID!
  owner: String!
  tickLower: BigInt!
  tickUpper: BigInt!
  amount: BigInt!
  amount0: BigInt!
  amount1: BigInt!
  eventsSummary: String!
}

type UniswapV3Pool_Initialize {
  id: ID!
  sqrtPriceX96: BigInt!
  tick: BigInt!
  eventsSummary: String!
}

type UniswapV3Pool_Mint {
  id: ID!
  sender: String!
  owner: String!
  tickLower: BigInt!
  tickUpper: BigInt!
  amount: BigInt!
  amount0: BigInt!
  amount1: BigInt!
  eventsSummary: String!
}

type UniswapV3Pool_Swap {
  id: ID!
  sender: String!
  recipient: String!
  amount0: BigInt!
  amount1: BigInt!
  sqrtPriceX96: BigInt!
  liquidity: BigInt!
  tick: BigInt!
  eventsSummary: String!
}

# type Tick @entity {
#   # format: <pool address>#<tick index>
#   id: ID!
#   # tick index
#   tickIdx: BigInt!
#   # how much liquidity changes when tick crossed
#   liquidityNet: BigInt!
#   # calculated price of token0 of tick within this pool - constant
#   price0: BigDecimal!
#   # calculated price of token1 of tick within this pool - constant
#   price1: BigDecimal!
# }
